name: Build macOS App

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-macos:
    runs-on: macos-latest
    env:
      APP_NAME: WebTvMux
      APP_VERSION: "1.0.0"

    steps:
      # --- Checkout repository ---
      - name: üß≠ Checkout repository
        uses: actions/checkout@v4

      # --- Set up Python ---
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- Install dependencies ---
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.* pyside6==6.* upx

      # --- Cleanup old builds ---
      - name: üßπ Clean previous builds
        run: |
          echo "üßπ Removing previous build artifacts..."
          rm -rf build dist || true
          mkdir -p dist/release
          echo "‚úÖ Clean workspace ready."

      # --- Verify binary and config folders before build ---
      - name: üß© Verify local bin/config presence
        run: |
          echo "üß© Checking local binaries and configs..."
          ls -lh bin || echo "‚ùå bin folder missing!"
          ls -lh config || echo "‚ùå config folder missing!"

      # --- Build macOS app bundle ---
      - name: üèóÔ∏è Build macOS App (.app + DMG)
        run: |
          echo "üèóÔ∏è Starting macOS app build..."
          python -m PyInstaller build_macos.spec

      # --- Verify inclusion inside .app ---
      - name: üîç Verify .app contents
        run: |
          echo "üîç Verifying inclusion of binaries and config..."
          APP_PATH="dist/${APP_NAME}.app/Contents/MacOS"

          if [ -d "${APP_PATH}/bin" ]; then
            echo "‚úÖ bin folder found inside .app:"
            du -sh ${APP_PATH}/bin/*
          else
            echo "‚ùå bin folder missing inside .app!"
            ls -R dist || true
          fi

          if [ -d "${APP_PATH}/config" ]; then
            echo "‚úÖ config folder found inside .app:"
            ls -lh ${APP_PATH}/config
          else
            echo "‚ùå config folder missing inside .app!"
          fi

      # --- Create DMG and ZIP packages ---
      - name: üì¶ Package .app into DMG and ZIP
        run: |
          echo "üì¶ Packaging version ${APP_VERSION}..."
          RELEASE_DIR="dist/release"
          APP_PATH="dist/${APP_NAME}.app"
          DMG_PATH="${RELEASE_DIR}/${APP_NAME}-macOS-v${APP_VERSION}.dmg"
          ZIP_PATH="${RELEASE_DIR}/${APP_NAME}-macOS-v${APP_VERSION}.zip"

          if [ ! -d "$APP_PATH" ]; then
            echo "‚ùå ERROR: ${APP_PATH} not found!"
            exit 1
          fi

          echo "üì¶ Creating DMG..."
          hdiutil create -volname "${APP_NAME}" \
            -srcfolder "${APP_PATH}" \
            -ov -format UDZO "${DMG_PATH}"

          echo "üì¶ Creating ZIP..."
          cd dist
          zip -r "release/${APP_NAME}-macOS-v${APP_VERSION}.zip" "${APP_NAME}.app"
          cd ..

          echo "‚úÖ Packaging complete:"
          du -sh ${DMG_PATH} ${ZIP_PATH}

      # --- Upload artifacts ---
      - name: ‚¨ÜÔ∏è Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WebTvMux-macOS-v${{ env.APP_VERSION }}
          path: |
            dist/release/WebTvMux-macOS-v${{ env.APP_VERSION }}.dmg
            dist/release/WebTvMux-macOS-v${{ env.APP_VERSION }}.zip

      # --- Summary ---
      - name: ‚úÖ Build summary
        run: |
          echo "‚úÖ Build and packaging for WebTvMux v${APP_VERSION} complete."
          echo "Artifacts:"
          ls -lh dist/release
